#+TITLE: Emacs configuration
#+DESCRIPTION: An org-babel based emacs configuration
#+LANGUAGE: en
#+PROPERTY: results silent

* REMOVE STARTUP WELCOME SCREEN and open default file
The code block below toggle off the welcome startup screen.

#+BEGIN_SRC emacs-lisp
(custom-set-variables
  '(inhibit-startup-screen t)
  '(initial-buffer-choice "~/Dropbox/gtd/gtd.org")
)
#+END_SRC
* Change Default Directory
https://apple.stackexchange.com/questions/399187/how-to-set-default-directory-for-emacs-27-1-app
#+BEGIN_SRC emacs-lisp
(setq default-directory "~/")
(setq command-line-default-directory "~/")
#+END_SRC

* Appearance
#+BEGIN_SRC emacs-lisp
  ;; (set-face-attribute 'default nil
  ;;   :family "Liberation Mono"
  ;;   :height 200
  ;;   :weight 'normal
  ;;   :width 'normal
  ;; )
  (setq visible-bell 1
        org-startup-indented t
        org-pretty-entities t
        org-hide-emphasis-markers t
        org-startup-with-inline-images t   ; only displays in the format [[file:path-to-file]], nothing else.
        org-image-actual-width '(300)
        inhibit-compacting-font-caches t   ; this is to help org-superstar run quickly with large files
        )
  (global-visual-line-mode 1)

  ;; save/restore opened files and windows config
  (desktop-save-mode 1) ; 0 for off

#+END_SRC
** mixed-pitch

#+BEGIN_SRC emacs-lisp
;; Set default, fixed and variabel pitch fonts
;; Use M-x menu-set-font to view available fonts
(use-package mixed-pitch
  :ensure t
  :hook
  (text-mode . mixed-pitch-mode)
  :config
  (set-face-attribute 'default nil :font "DejaVu Sans Mono" :height 200)
  (set-face-attribute 'fixed-pitch nil :font "DejaVu Sans Mono")
  (set-face-attribute 'variable-pitch nil :family "Liberation Sans")
)
#+END_SRC

#+RESULTS:
| mixed-pitch-mode | text-mode-hook-identify |
** solve problem with proportional fonts on dropdown menus
This probably isn't actually a problem for me right now, but [[https://lucidmanager.org/productivity/ricing-org-mode/][this guide]] I'm using recommends it so I'm including for the sake of completion.

#+BEGIN_SRC emacs-lisp
   ;; Required for proportional font
   (use-package company-posframe
     :ensure t
     :config
     (company-posframe-mode 1))
#+END_SRC
** Show hidden emphasis markers
See [[https://lucidmanager.org/productivity/ricing-org-mode/][here]] and [[https://github.com/awth13/org-appear][here]].
When you turn on org-hide-emphasis-markers it can be hard to see or change the characters that encode the formatting. org-appear solves tha.
#+BEGIN_SRC emacs-lisp
  ;; Show hidden emphasis markers
  (use-package org-appear
    :ensure t
    :hook
    (org-mode . org-appear-mode)
    :config
    (setq org-appear-autolinks t
          org-appear-autosubmarkers t
          org-appear-delay .7
          )
  )
#+END_SRC
*test*
** org-superstar
See [[https://lucidmanager.org/productivity/ricing-org-mode/][here]] and [[https://github.com/integral-dw/org-superstar-mode][here]].
#+BEGIN_SRC emacs-lisp
  ;; Nice bullets
  (use-package org-superstar
      :ensure t
      :config
      (setq org-superstar-special-todo-items t)
      (add-hook 'org-mode-hook (lambda ()
                                 (org-superstar-mode 1)))
  )
#+END_SRC
** org-src Behavior
[2021-11-02 Tue]
- This started because emacs was doing weird auto-tab things when I was writing code blocks, and a quick search turned up [[https://github.com/syl20bnr/spacemacs/issues/13255#issuecomment-592998372][this]].
  - tl;dr: =(setq org-src-preserve-indentation t)=, but I'm'a try the solver's whole little setup.
#+begin_src emacs-lisp
  ;; src block indentation / editing / syntax highlighting
  (setq org-src-fontify-natively t
        org-src-window-setup 'current-window ;; edit in current window
        org-src-strip-leading-and-trailing-blank-lines t
        org-src-preserve-indentation t ;; do not put two spaces on the left
        org-src-tab-acts-natively t)
#+end_src
** highlight-parentheses
- [2021-11-03 Wed]
  - Found from [[https://emacs.stackexchange.com/a/27037][here]].
  - WARNING: open quotation marks appear to break this!
  - Also matches different delimeters with one another. Instead I added [[*xah-check-parens-balance][xah-check-parens-balance]], which handles all this much better.
#+begin_src emacs-lisp
;(use-package highlight-parentheses
;   :ensure t
;   :pin melpa
;   :config 
;   (setq hl-paren-background-colors '("orangered4"))
;   (setq hl-paren-colors '("black")))
;
;(define-globalized-minor-mode global-highlight-parentheses-mode
;  highlight-parentheses-mode
;  (lambda ()
;    (highlight-parentheses-mode t)))
;(global-highlight-parentheses-mode 0)
;
;(highlight-parentheses-mode 1)
#+end_src
** show-paren-mode
#+begin_src emacs-lisp
(show-paren-mode t)
(setq show-paren-when-point-inside-paren t)
(setq show-paren-style 'expression)
#+end_src
** electric-pair-mode
#+begin_src emacs-lisp
(electric-pair-mode t)
(setq electric-pair-preserve-balance t
      electric-pair-delete-adjacent-pairs t)
#+end_src
** Character Encoding
- [2021-11-05 Fri]
  - http://ergoemacs.org/emacs/unicode_basics.html
  - https://www.reddit.com/r/emacs/comments/2tp9x9/default_coding_systems/
    - (prefer-coding-system 'utf-8) (modify-coding-system-alist 'file "\.org\'" 'utf-8) ???
  - https://www.masteringemacs.org/article/working-coding-systems-unicode-emacs
  - https://sachachua.com/dotemacs/#org7b20ec4
  - https://web.archive.org/web/20151228092545/http://www.wisdomandwonder.com:80/wordpress/wp-content/uploads/2014/03/C3F.html#sec-10-2-3

Check the value of =buffer-file-coding-system= to see the current coding system.

[2021-11-08 Mon] To be honest, I'm not sure what the most appropriate method is. I see some people use =prefer-coding-system=, Nobiot uses =set-default-language-environment=, and there are others. Basically, there are a lot of ways to tweak how Emacs handle character encoding, and there are definitely ways to mess it up, so I'm going to take the most concervative approach and only force utf-8 in .org files:
#+begin_src emacs-lisp
(prefer-coding-system 'utf-8)
(modify-coding-system-alist 'file ".org" 'utf-8)
#+end_src


When there is a graphic display (not a text only terminal), this sets the priority of clipboard input. After checking the variable defaults I'm not convinced this is necessary, but several sources above use some variation of this:
#+begin_src emacs-lisp
;(when (display-graphic-p)
;  (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))
#+end_src
** UTF-8 checkboxes
- [2021-11-05 Fri]
  - From [[https://sachachua.com/dotemacs/#orgabdc8bc][Sacha Chua's config]].
  - [X] This doesn't work, and I suspect it's conflicting with other other formating things.

#+begin_src emacs-lisp
(setq org-html-checkbox-type 'unicode)
(setq org-html-checkbox-types
      '((unicode (on . "<span class=\"task-done\">&#x2611;</span>")
                 (off . "<span class=\"task-todo\">&#x2610;</span>")
                 (trans . "<span class=\"task-in-progress\">[-]</span>"))))
#+end_src
** adaptive-wrap
[[https://elpa.gnu.org/packages/adaptive-wrap.html][Link]]
#+begin_quote
"This package provides the `adaptive-wrap-prefix-mode' minor mode which sets
the wrap-prefix property on the fly so that single-long-line paragraphs get
word-wrapped in a way similar to what you'd get with M-q using
adaptive-fill-mode, but without actually changing the buffer's text."
#+end_quote

[[https://github.com/emacs-straight/adaptive-wrap/blob/master/adaptive-wrap.el][Source Code]]

It solves my issue of wanting the first line of my paragraphs indented well enough.

See [[https://emacs.stackexchange.com/a/14590][here]] and [[https://stackoverflow.com/a/13561223][here]] for examples of calling it in config, but no examples with use-package yet.

** Windows split behavior
[[https://emacs.stackexchange.com/a/33756][Source]], thought most of the more complicated bits aren't going to be invoked much. In fact, you can get rid of them and just the changed split thresholds will get the performance that I want (split to the left or right, instead of always creating these lower splits).
#+BEGIN_SRC emacs-lisp
(setq split-height-threshold 80
      split-width-threshold 80)

(defun my-split-window-sensibly (&optional window)
    "replacement `split-window-sensibly' function which prefers vertical splits"
    (interactive)
    (let ((window (or window (selected-window))))
        (or (and (window-splittable-p window t)
                 (with-selected-window window
                     (split-window-right)))
            (and (window-splittable-p window)
                 (with-selected-window window
                     (split-window-below))))))

(setq split-window-preferred-function 'my-split-window-sensibly)
#+END_SRC
* org derivatives
** Design
- [[https://www.reddit.com/r/orgmode/comments/i16xti/question_any_problems_assigning_orgroamdirectory/][This]] has some good notes about how org-mode and org-roam directories should relate.
  - You don't want org-agenda looking at your org-roam dir. It's not optimized to parse lots of small files.
  - I believe that your cannot run roam backlinks to files outside of roam's designated dir.
  - Many people have a dir for each, side by side, so roam backlinks will not work with org-roam files.
  - However, in theory you can assign both to the same dir, then tweak all your org-roam-capture-templates to create files in a org-roam subdir. In theory, this gets you the best of both worlds (assuming you tell org-agenda not to search the roam subdir).
  - People often create a subdir within their org-roam dir to contain their dailies.

- [[https://www.orgroam.com/manual.html#How-do-I-have-more-than-one-Org_002droam-directory_003f][This]] explains how to set the value of org-roam-directory to be different in different directories.

*** File Structure:
#+begin_example

org
|    roam-note1.org
|    roam-note2.org
|
|
|----gtd
|    |    gtd.org
|    |    |    * Big Projects
|    |    |    * Short Projects
|    |    |    * Tasks and Appointments
|    |    inbox.org (for captures)
|    |    
|    |----gtd-archive (backup, auto-save, and archive for gtd material)
|----templates
|----notes-archive (backup, auto-save, and archive for roam notes)
|----dailies  
|    |    date.org
|    |    date.org
|----images

#+end_example

*** Work Flow:
- Text enters the system through either captures (witch get appended to a heading in inbox.org) or through a daily note, which serves as more of a daily workspace for ideas that need forming, especially for thoughts that I am discovering and so don't have any sort of title. Text from a daily note might get moved into a capture once it has a little more clarity.
  - Daily notes serve as both workspaces for ideas that need forming and as a narrative or documentation of my day as I write to myself to find out what I am thinking.
    - Text that reaches some form should get refiled, either into the inbox or gtd or some permanent note. In the case of the latter, include a link.
- Tasks and projects (groups of tasks) go to gtd.org
- 

Gah, I'm thinking in too much detail already.
Think about how you think, and how my brain likes to flow through these things over time.

I start with one of 7 things:
1. An addition to an existing work.
2. A task; something I need to do, or a bunch of somethings (a project)
3. An idea, or an inspiration. It may take a while to figure out where it should go, or even what to call it.
4. A question; a line of inquiry. This too might change and narrow or split in its pursuit.
5. Notes on a meeting, the events of the day, and/or an important piece of information that I need to retain and access in the future.
6. An 'original' or synthesized thought; a conclusion, rooted in sources but standing on its own.
7. Notes on a 'text', or extracts, with bibliographic reference to that text.

It begins as either a dashed off thing, to be removed from my thoughts as soon as possible in order to not interrupt a focus, or as a shaped an growing thing that slowly takes form as I work it in my daily note.

Once it is sufficiently fleshed out and contextualized to stand on its own (that I may find it again, having fully forgotten it, I should not wonder the when, what, or why of it and be vexxed) it should be moved to the appropriate place.
What I don't know (and do not /yet/ need to know) is the nature of these places. Should they be files? Headings? Directories? Tags?
For instance, should most all of my tasks, my agenda, reside in my gtd.org as it has? Or should projects get their own roam nodes? That could be sensible if I wish to combine my line of inquiry and synthesis on the subject with its labors. But do I? I suspect not.
Regardless, I don't need to certify that yet. I am still creating a higher level map of my flows.

So, once a thing is formed, it could be of two types:
1. A scrap, that stands alone, but essentially lifeless. A passing task, or a snippet of an idea that does not immediately catch my interest, or what have you. Fuel, or bricks, depending on your metaphor.
2. A question, or a vision to be manifested, or a creative urge. A line of inquiry, or a project. The spark or the ember that brings the rest together.

Then the question is whether this thing will live within my field of vision or get tucked away somewhere, to be reviewed in due time.
In the first case, excellent. Such a thing will be =active= in some way.
In the latter, I must have some way of recycling it, of allowing it to sift to the top periodically and be reviewed. However I mark or segregate them, the important bit is the periodicity of it. Should I consider it again in a week? a month? Next quarter or next year?
These are the =reviews=: weekly, monthly, quarterly, yearly.

How do notes and tasks relate and play together?
A whole beast will be both a project and a line of inquiry. They will be largely parallel, with links to specific todo items sprinkled in the body of inquiry.

A line of inquiry (LOI) is the burbling ball of thoughts and questions and links and bits of resources. It is both the working space for the act of inquiry and also the index with links to notes on text, fully formed ideas or principles, etc. As my inquiry generates reference material and complete thoughts, they will get spun off and linked to.
- Roam links (I think) can exist at a specific point in the text, but point to a whole text.
- As such, an LOI will have many links out but almost not links in.
- If you find you want to link to a specific bit of the LOI, that's probably a sign that that chunk should be spun out into its own node.



** org-mode

#+BEGIN_SRC emacs-lisp
(use-package org
  :ensure nil
  :bind (("C-c l" . org-store-link)
         ("C-S-v" . scroll-other-window)
         ("M-V" . scroll-other-window-down)
	     ("C-c ." . org-time-stamp)

        )
)
#+END_SRC
*** org-todo-keywords
My keyword system begins with TODO, then can progress in either:
- =REVIEW=: the task needs clarification, to be broken up, or possibly to be cancelled
- =NEXT=: the task is on deck
- =STARTED=: the task has been begun but is not finished
- =WAITING=: the task is waiting for something (requires a note)
- =HOLD=: the task is not active but is not waiting for a specific trigger (requires a note)
- =CANCELED= / =DONE=

(There is also a separate keyword sequence for projects)



#+BEGIN_SRC emacs-lisp
(setq org-todo-keywords
 '((sequence
    "TODO(t)"
    "REVIEW(r)"
    "NEXT(n)"
    "STARTED(s!)"
    "WAITING(w@/!)"
    "HOLD(h@/!)"
    "|"
    "CANCELED(x!)"
    "DONE(d!)")
   (sequence
    "PROJECT - OPEN(p!)"
    "PROJECT - ON-HOLD(@/!)"
    "|"
    "FINISHED(f!)")))
(setq org-todo-keyword-faces
  '(("TODO". "purple")
    ("REVIEW" . "orange")
    ("NEXT" . "magenta")
    ("STARTED" . "pink")
    ("WAITING" . "blue")
    ("HOLD" . "cyan")
    ("CANCELED" . "green")
    ("DONE" . "green")
    ("PROJECT - OPEN" . (:foreground "red" :weight bold))
    ("PROJECT - ON-HOLD" . (:foreground "cyan" :weight bold))
    ("FINISHED" . (:foreground "green" :weight bold))))
#+END_SRC
*** org-log-into-drawers
See [[https://stackoverflow.com/questions/63797643/hide-org-todo-state-changes-in-drawer-or-properties][here]].

Setting this variable to true moves the logs generated by state changes into a drawer and out of site.
#+begin_src emacs-lisp
(setq org-log-into-drawer t)
#+end_src
*** org-todo-state-tags-triggers
http://doc.norang.ca/org-mode.html#ToDoStateTriggers
http://doc.endlessparentheses.com/Var/org-todo-state-tags-triggers.html

Different keywords will add or remove corresponding tags.
- Moving a task to =TODO=:
  - Removes =review=, =next=, =started=, and =waiting= tags
- Moving a task to =REVIEW=:
  - Adds the =review= tag
  - Removes =next= and =waiting= tags
  - May retain the =started= tag
- Moving a task to =NEXT=:
  - Adds the =next= tag
  - Removes =review=, and =waiting= tags
  - May retain the =started= tag
- Moving a task to =STARTED=:
  - Adds the =started= tag
  - Removes the =review=, =next=, and =waiting= tags
  - NB: a task, once started, should retain its =started= tag until it is moved to a done state
  - NB: a started task can wait, but a waiting task, once started, is no longer waiting
- Moving a task to =WAITING=:
  - Adds the =waiting= tag
  - Removes the =next= tag
  - May retain the =review= or =started= tags
- Moving a task to =CANCELED= adds the =canceled= tag
- Moving a task to =DONE= removes the =canceled= tag
- Moving a task to a todo state removes the =canceled= tag
- Moving a task to a done state (=CANCELED= or =DONE=) removes all todo tags

Also, assigning any project states assigns the =project= tag, which retains even if it is moved to =FINISHED= or =CANCELED=, and assigning any other keyword (or no keyword) removes the =project= tag.

Finally, the =next=, =started=, and =project= tags are excluded from inheritance. Consequently, the =review=, =waiting=, and =canceled= tags are inherited.
#+begin_src emacs-lisp
(setq org-todo-state-tags-triggers
;; Triggers for state changes
      (quote (
              ;; Move to TODO removes the review, next, started, waiting, and project tags
              ("TODO" ("REVIEW") ("NEXT") ("STARTED") ("WAITING") ("HOLD") ("PROJECT"))

              ;; Move to REVIEW adds review tag
              ;; Move to REVIEW removes next, waiting, and project tags
              ("REVIEW" ("REVIEW" . t) ("NEXT") ("WAITING") ("HOLD") ("PROJECT"))

              ;; Move to NEXT adds next tag
              ;; Move to NEXT removes review, waiting, and project tags
              ("NEXT" ("NEXT" . t) ("REVIEW") ("WAITING") ("HOLD") ("PROJECT"))

              ;; Move to STARTED adds the started tag
              ;; Move to STARTED removes review, next, waiting, and project tags
              ("STARTED" ("STARTED" . t) ("REVIEW") ("NEXT") ("WAITING") ("HOLD") ("PROJECT"))

              ;; Move to WAITING adds the waiting tag
              ;; Move to WAITING removes the next and project tags
              ("WAITING" ("WAITING" . t) ("NEXT") ("HOLD") ("PROJECT"))

	            ;; Move to HOLD adds the hold tag
	            ;; Move to HOLD removes next, waiting, and project tags
              ("HOLD" ("HOLD" . t) ("NEXT") ("WAITING") ("PROJECT"))
	      
              ;; Move to canceled adds the canceled tag
	            ;; Move to canceled removes the project tag
              ("CANCELED" ("CANCELED" . t) ("PROJECT"))

	            ;; Move to done removes the canceled and project tags
	            ("DONE" ("CANCELED") ("PROJECT"))
              
              ;; Move to any todo state removes the canceled tag
              (todo ("CANCELED"))
              ;; Move to any done state removes review, next, started, and waiting tags
              (done ("REVIEW") ("NEXT") ("STARTED") ("WAITING"))

              ;; Assigning "PROJECT - OPEN" or "FINISHED" states adds the project tag and removes review, next, started, waiting, and hold tags
              ;; Assigning the "PROJECT - ON-HOLD" state adds the project and hold tags and removes review, next, started, and waiting tags
              ("PROJECT - OPEN" ("PROJECT" . t) ("REVIEW") ("NEXT") ("STARTED") ("WAITING") ("HOLD"))
              ("PROJECT - ON-HOLD" ("PROJECT" . t) ("HOLD" . t) ("REVIEW") ("NEXT") ("STARTED") ("WAITING"))
              ("FINISHED" ("PROJECT" . t) ("REVIEW") ("NEXT") ("STARTED") ("WAITING") ("HOLD"))

              ;; Assigning no keyword removes the project tag
              ("" ("PROJECT"))
             )))

(setq org-tags-exclude-from-inheritance '("NEXT" "STARTED" "PROJECT"))
#+end_src
*** org-capture

https://orgmode.org/guide/Capture.html
#+BEGIN_SRC emacs-lisp

(global-set-key "\C-cc" 'org-capture)

(setq org-capture-templates
      '(("t" "Todo [gtd]" entry (file "~/Dropbox/org/gtd/gtd.org") "* TODO %i%?")
	      ("i" "Todo [inbox]" entry (file+headline "~/Dropbox/org/gtd/inbox.org" "Tasks") "* TODO %i%?")
	      ("c" "Capture [inbox]" entry (file+headline "~/Dropbox/org/gtd/inbox.org" "Capture") "* %i%?")
        ("T" "Tickler" entry (file+headline "~/Dropbox/org/gtd/tickler.org" "Tickler") "* %i%? \n %U")))

#+END_SRC

**** org-capture-templates
https://orgmode.org/manual/Template-elements.html
*** org-agenda
**** How to use agenda and general file system thoughts
So I'm thinking about how I'm going to use org-agenda, and more broadly how I'm going to organize around GTD.
Now that I've actually looked at the agenda view and poked around a little bit, I note a few things:
- Timestamps are important. If it isn't dealined or scheduled or what have you, it's not going to show up in the calendar portion of the agenda view.
- The follow-on to that is using priorities, keywords, and tags. These are what you use to sort out an otherwise undifferentiated list of tasks.
  - Can I sort by [[https://orgmode.org/manual/Effort-Estimates.html][effort]] as well?
- The file containing the task is shown, which suggests that maybe I want to keep different kind of stuff in different files. Like, projects, birthdays, repeating tasks, miscellaneous tasks, routine/habits, etc.
  - Alternatively, maybe I can make the file not display??
    - Yes, see [[*Customize agenda-view][Customize agenda-view]] below
  - It actually shows the agenda items "category", which just defaults to the file name, but can be specified [[https://orgmode.org/manual/Categories.html][like so]]: =#+CATEGORY: Thesis=
- Important to note, that I am currently imagining that my GTD and my org-roam notes exist side-by-side but largely separately, or at least as two distinct systems.
  - A series of org files will hold all my tasks, schedules, projects, people,   etc.
  - Then all of my notes and developing thoughts and such will live in the zettelkasten.
    - *I am not anticipating having and TODO items in the roam files*
  - The main point of connection will be the index files in roam, which will connect to project trees in GTD (and of course, individual TODOs can link to other items or clusters in roam)
  - 

**** org-agenda commands
Org-agenda commands can be found [[https://orgmode.org/manual/Agenda-Commands.html][here]].

#+BEGIN_SRC emacs-lisp
(global-set-key "\C-ca" 'org-agenda)
#+END_SRC
**** org-agenda-files
!!! None of the bits in this code-block seem to be running by default. I have to manually run these lines to find the gtd items or to truncate lines. !!!
- [2022-03-09 Wed] I may have fixed this by switching it to a list. But maybe not. I haven't restarted emacs yet.
- [2022-03-13 Sun] Nope, still isn't running by default. Super weird.
  - The common source of this problem seems to be ='(org-agenda-files nil)= showing up in the =(customs-set-variable...)= block in the init.el file, which supersedes the line I have here, but that's not my problem. I used =helm-org-rifle= to search for =org-agenda-files= and all I got where the lines right here.
  - So far [[https://emacs.stackexchange.com/questions/59392/org-agenda-not-loading-org-agenda-files-funkiness][this]] is the closest thing to my problem I've found, and the only thing that could be a solution: "customize the org-agenda-files variable and save it for all future sessions".
  - SOLVED: I checked =emacs-config.el=, which should be a file of all emacs-lisp code in =emacs-config.org=, as compiled by babel (I think) during the loading of =init.el=. And what do you know? "=org-agenda-files=" wasn't in it at all. So I figure there's something wrong with the =#+BEGIN_SRC emacs-lisp...#+END_SRC= such that it wasn't getting recognized and its contents wasn't getting added to =emacs-config.el=. Buuuut it looks fine? Regardless I made a new block and copied over the lisp line, evaluated the file, and now it works.
    - I leave the defective code block here, with it's content commented out, for posterity/curiosity's sake.

#+begin_src emacs-lisp
(setq org-agenda-files (list "~/Dropbox/org/gtd/gtd.org" "~/Dropbox/org/gtd/people.org"))
#+end_src

#+BEGIN_SRC emacs-lisp
;; (setq org-agenda-files (list "~/Dropbox/org/gtd/gtd.org" "~/Dropbox/org/gtd/people.org"))
#+END_SRC emacs-lisp
**** Customize agenda-view
Formatting fields in agenda-view:
- https://lists.gnu.org/archive/html/emacs-orgmode/2010-01/msg00744.html
- http://doc.endlessparentheses.com/Var/org-agenda-prefix-format.html

#+BEGIN_SRC emacs-lisp
(add-hook 'org-agenda-mode-hook
;; Disables word-wrap and enables truncate-line in agenda buffers
          (lambda ()
            (visual-line-mode -1)
            (toggle-truncate-lines 1)))


#+END_SRC emacs-lisp
**** Set agenda to open in new frame
[[https://www.reddit.com/r/orgmode/comments/kwko93/comment/gj536oq/?utm_source=share&utm_medium=web2x&context=3][Source]].
#+BEGIN_SRC emacs-lisp
(setq org-agenda-window-setup 'only-window); agenda takes whole window
(setq org-agenda-restore-windows-after-quit t); restore window configuration on exit
#+END_SRC
**** Configure org-agenda-follow-mode

#+BEGIN_SRC emacs-lisp
(setq org-agenda-start-with-follow-mode nil)
#+END_SRC

**** Using org-agenda with org-roam
Normally these don't mix well. Org-agenda checks every in a targeted directory for todo items, and since org-roam creates tons of little files this makes the process very slow, so the usual practice is to segregate all your agenda files in their of directory.
However, [[https://d12frosted.io/posts/2021-01-16-task-management-with-roam-vol5.html][someone has written some code to efficiently let agenda find todo items in roam nodes]].
*** org-mode Timestamping
[2021-11-02 Tue]
- This is all to set up a =#+modified= header that will automatically update every time the org file is saved
  - [[https://www.reddit.com/r/orgmode/comments/hierqz/any_one_figure_it_out_how_to_update_last_modified/][This]] led me [[https://github.com/skx/dotfiles/blob/master/.emacs.d/init.md#org-mode-timestamping][here]]. Also, [[https://org-roam.discourse.group/t/update-a-field-last-modified-at-save/321/2][this]] looks like a different way to accomplish the same.
  - Ha! Too clever by half. The function is run every time I save /this/ document too! Which, uh, messes with things. So let's try to exempt this file, yeah?
  - Well, I finally had to actually write some lisp. Just some conditional statements, but wow. I've never encountered so logically literal a thing in my life.

    #+begin_src emacs-lisp
(defun ewhd/update-org-modified-property ()
  "If a file contains a #+modified' property update it to contain
  the current date/time"
  (interactive)
  (save-excursion
    (widen)
    (goto-char (point-min))
    (when (re-search-forward "^#\\+modified:[[:blank:]]*" (point-max) t)
      (progn
        (kill-line)
        (insert (format-time-string "%Y-%m-%d-T%H%M"))))))

(defun ewhd-org-mode-before-save-hook ()
  (when (and (eq major-mode 'org-mode) (eq nil (equal "emacs-config.org" (buffer-name))))
    (ewhd/update-org-modified-property)))

(add-hook 'before-save-hook #'ewhd-org-mode-before-save-hook)
    #+end_src
*** org-columns-default-format

#+begin_src emacs-lisp
(setq org-columns-default-format-for-agenda "%25ITEM %4TODO %1PRIORITY %4Effort(Estim){:}  %4CLOCKSUM(Clock) %20TAGS")
#+end_src
*** Global effort estimates
#+begin_src emacs-lisp
(customize-set-variable 'org-global-properties
                        '(("Effort_ALL" . "0:00 0:07 0:15 0:30 0:45 1:00 1:30 2:00 2:30 3:00")))
#+end_src
** org-roam
*** org-roam init and basic settings
- [2020-02-27 Thu]
  - Installing this is a little tricky, because you have to add sqlite3 to 'exec-path'.
  - Let's try these instructions: https://justjensen.co/setting-up-sqlite-on-windows-10/
  - Also, for whatever weird reason, sqlite3.exe is included in the tools, not the standard download:
  - https://stackoverflow.com/questions/43050795/no-sqlite3-exe-in-sqlite3-download-folder-for-windows-64-bit

- [2021-11-02 Tue]
  - After upgrading to org-roam v2, I was getting this error: =M-x-execute-command: No EmacSQL SQLite binary available, aborting org-roam v2= even though I had sqlite and sqlite3 and all that installed from the last time I got this working
    - When I did this in February I almost sure used [[https://web.archive.org/web/20200629071835/https://org-roam.readthedocs.io/en/master/installation/][this]] resource, as when I look at the old =org-roam-db.el= file it has been modified per instructions. HOWEVER, the new version of that file for v2 is built differently, and from looking at it should be able to handle =emacsql-sqlite=, =emacsql-libsqlite3=, or =emacsql-sqlite3=, so, no idea why it doesn't work.
      - However, in reading the comments in the new =org-roam-db.el= it says sqlite3 "has the advantage that you likely don't need a compiler"
  - I installed Mingw-w64 builds as recommended [[https://github.com/skeeto/emacsql/issues/55#issuecomment-515704368][here]], and it seems to have successfully built the db?
  - However, roam doesn't appear to work:
    - None of the key-combinations for roam commands which are set in my config work, though the commands are runnable through M-x
    - Running the migration wizard creates a backup and then gives a timeout error
    - The migration wizard sometimes gives a "selecting deleted buffer" error
    - The =org-roam-db-sync= command would kind of alternate between succeeding and returning a "selecting deleted buffer" error as well.
  - Aaaand, now it's working. No idea why. I deleted and forced emacs to recreate the db and the deleted the .bak to allow it to retry the migration wizard, and one time I tried the wizard it just started chugging through all those files. Then I synced the db again and hey presto: =org-roam-node-find= works now.
    - Those key-combinations still aren't bound, though. Let's try reloading the init.el file -- nope, still no good. I wonder if it's something wrong with how org-roam v2 plays with use-package?
      - Ah, ="C-c n i"= was successfully bound. The difference is that it was a single binding under =:bind (:map org-mode-map ("C-c n i" . org-roam-node-insert))= while the rest were multiple bindings in a list as in =:bind (:map org-roam-mode-map (("C-c n l" . org-roam-buffer-toggle)...("C-c n f" #'org-roam-node-find)))=, so something is off with the parens or something.
      - Well, I messed around with the parens and then realized it was probably the obvious thing: =org-roam-mode-map= is either deprecated or called differently -- yup, I commented out the =:map= bits so that =:bind= bit just took a list of bindings and it works fine now.
        - I'm betting this has to do with how the nature of =org-roam-mode= has changed from v1 to v2.
  - However, I'm still not seeing backlinks...and when I run =org-roam-db-sync= I get that alternating =Selecting deleted buffer= error again.
    - I'm also still getting these timeout errors in other places. For instance, I was just running =load-file= to reload this config and like clockwork it would hold up and time out, and then when I ran the same thing again it would work. What's up with that???
    - Backlinks are working now! I think I just wasn't looking at them in the right place, lol. I'm going to bed.
  - *Next time you do this, [[https://github.com/nobiot/emacsql-sqlite.exe][try using this]] to get SQLite working*
    - [[https://org-roam.discourse.group/t/v2-do-we-want-org-roam-project-to-host-an-executable-file/1549][Furthermore]].

Things I want to change:
- [ ] Add templates for roam-capture
  - At the very least:
    - Resource (for a website, blog, podcast, whatever)
    - Person (for an author, creator, historical figure, person I know, etc.)
    - Thought/Idea: for my thoughts/synthesis
  - These will each have different categories, tags, etc.
- [ ] Change the way org-roam-find-file displays, so that Title is on the left and Tags are all on the right (maybe show Category too??)

#+BEGIN_SRC emacs-lisp
  (use-package org-roam
        :ensure t
        :init
        (setq org-roam-v2-ack t)
        :hook
        (after-init . org-roam-mode)
        :custom
        (org-roam-directory "~/Dropbox/org/")
	    (org-id-method 'ts)  ;; changes org-roam default id method form uuid to a timestamp
	    (org-id-ts-format "%Y-%m-%d-T%H%M.%S.%2N")  ;; formats the timestamp method to create a unique but also human readable id
        ;(org-roam-completion everywhere t)
        :bind (;:map org-roam-mode-map
                ("C-c n l" . org-roam-buffer-toggle)
                ("C-c n f" . org-roam-node-find)
                ("C-c n g" . org-roam-graph)
                ("C-c n t" . org-roam-tag-add)
                ("C-c n T" . org-roam-tag-delete)
                ;:map org-mode-map
                ("C-c n i" . org-roam-node-insert))
         :config
         (org-roam-setup)

         )  
#+END_SRC

*** org-roam templates

*** org-roam-capture-templates
- Resources:
  - https://www.orgroam.com/manual.html#The-Templating-System
  - https://www.reddit.com/r/orgmode/comments/lmlsdr/simple_question_re_orgroam_how_to_access_capture/
  - [[https://www.orgroam.com/manual.html#The-Templating-System][This]] video explains it all pretty well.
    - Mentioned around 24 minutes in: you can make a template by editing a file, saving it in a particular place, then referencing it by placing  =(file "path/to/file")= in place of the ="%?"= or whatever string you write to define the template.
[2021-11-02 Tue]
- For v2, some things change a little bit
- I want to shorten the title string, probably by cutting down to just Y/m/d/H, and maybe even cutting off hour, I haven't decided
- I also want to customize the ID format, specifically making it shorter and more human readable. I think this will be done within the templates.
  - Can I just use a timestamp /as/ the ID? If it goes down to the second? I'm not going to be making multiple nodes in a second am I?
  - [[https://org-roam.discourse.group/t/v2-set-id-to-a-timestamp/1492/2][This whole thread]] has some good info.
  - [[https://org-roam.discourse.group/t/update-a-field-last-modified-at-save/321][This one too]], which has details about adding a =LAST_MODIFIED= element to the header which auto-updates whenever the fil
  - Apparently as of org 9.5, =org-id-ts-format= should make timestamp ID much easier ([[https://org-roam.discourse.group/t/v2-set-id-to-a-timestamp/1492/3][here]]) (for more, see [[https://www.mail-archiv
  - I got a lot of the cool header and ID formatting from [[https://org-roam.discourse.group/t/how-to-auto-generate-org-id-following-org-roam-find-file-immediate/1412/7][here]].

#+begin_src emacs-lisp
(setq org-roam-capture-templates
         '(
;	   ("d" "default" plain "%?"
;            :target (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
;	    :unnarrowed t)
           ("t" "test" plain "%?"
	    :target (file+head "%<%Y%m%d%H>-${slug}.org"
			       "#+title: ${title}\n#+created: %<%Y%m%d%H%M%S>")
            :unnarrowed t)
	   ("b" "better" plain "%?"
	    :target (file+head "%<%Y%m%dT%H%M>-${slug}.org" "#+title:    ${title}\n%[~/Dropbox/org/templates/org-roam-header-template.org]\n%[~/Dropbox/org/templates/org-roam-dailies-template.org]")
            :unnarrowed t)
	   ("z" "zeta" plain "\n%?"
	    :target (file+head "%<%Y%m%dT%H%M>-${slug}.org"
			       "#+title:    ${title}
#+created:  %<%Y-%m-%d-T%H%M>
#+modified: <>
#+filetags: \n\n")
            :unnarrowed t)))

#+end_src

*** org-roam-dailies-capture-templates
- [2021-11-03 Wed]
  - Just pulled default settings from [[https://www.orgroam.com/manual.html#Configuration][the manual]], then modified the template to match my defaults as set in [[*org-roam-capture-templates][org-roam-capture-templates]].
    - This was finicky, and after a bunch of false starts I figured out how to just load templates from files. [[https://github.com/org-roam/org-roam/issues/1845][This thread]] helped me, but especially th
      - Other resources that I tried but couldn't get to work were [[https://www.reddit.com/r/orgmode/comments/c26qja/capture_template_based_in_a_file/][here]] and [[https://helpdeskheadesk.net/help-desk-h
      - Furthermore, and this has been bothering me for a while, is I see a lot of current posts where roam users are calling things like =(function org-roam--capture-get-point)= (from [[https://gist.github.com/nobiot/6f7845800a2ecd8c12163b5e270779af#file-init-el-L294][nobiot's init.el]]) or =#'org-roam-capture--get-point= (from [[https://org-roam.discourse.group/t/daily-task-management-with-org-agenda-and-org-roam-dailies/989][here]]) in their capture templates, and I can't figure out for the life of me what they do, or why they have slightly differently positioned " =-= " in them. But that's a mystery for another day.


#+begin_src emacs-lisp
(setq org-roam-dailies-directory "daily/")

(setq org-roam-dailies-capture-templates
      '(("d" "default" plain "%?"
         :if-new (file+head "%<%Y-%m-%d>.org" "#+title:    %<%Y-%m-%d>\n%[~/Dropbox/org/templates/org-roam-header-template.org]\n%[~/Dropbox/org/templates/org-roam-dailies-template.org]"))))
#+end_src
             "%[~/Dropbox/org/templates/org-roam-dailies-template.org]"
*** org-roam-node-display-template
- [2021-11-02 Tue]
  - From [[https://org-roam.discourse.group/t/org-roam-major-redesign/1198/220][here]]:
    - "[Subdirectories] can no longer be used as tags in V2, but they can be made appear in completion in org-roam-node-find etc. by setting this variable:" =org-roam-node-display-template=
    - Nobiot also has [[https://gist.github.com/nobiot/07dd6de47272e09bb4bf80bd165ec44c][a hack to display only the first subfolder]], rather than the whole path.
    - Configured the variable. It basically appears to work, which is good enough for now.
- [2021-11-03 Wed]
  - Tried to get Nobiot's hack for displaying only the subfolder to work, and after a deep rabit hole I still haven't figure it out. It keeps throwing an error because it thinks the =lambda= function is receiving 3 arguments, but I can't for the life of me figure out why.
    - N.B.: use =xah-check-parens-balance= instead of anything else because the one "greater than symbol" in there fools the built-in features.
    - I'm giving up on this for now. This is a maybe/someday thing.
    - Ok, I lied. I didn't give up, and I fuckin' got it. Turns out that the version of =org-roam-node--format-entry= in /my/ =org-roam-node.el= looks quite different from the one Nobiot worked off of, and /in particular mine takes up to 3 arguments compared to his 2/, which is why mine was throwing an error (though, in theory, if I had tried it without the optional =length= argument it probably would have worked...). So, once I figured all that out I copied over my local default, renamed it with a =my/= prefix, parsed through to find the line that Nobiot had changed, copied his modification over, crossed my fingers, and evaluated...and it worked! Fuck yeah!
  - I am getting a funny wrap-around issue when I use =org-roam-node-find= with a split frame (two vertical buffers) that resembled both [[https://github.com/org-roam/org-roam/issues/1640][this]] and [[https://github.com/org-roam/org-roam/issues/1578][this]]. But that's for another day.

#+begin_src emacs-lisp
(setq org-roam-node-display-template
  "${title:20}  ${file:9} ${tags:*}")

(advice-add #'org-roam-node--format-entry :override #'my/org-roam-node--format-entry)

(defun my/org-roam-get-subdirectory (filename)
  "Return the first subdirectory of FILENAME."
  (car (f-split filename)))

(defun my/org-roam-node--format-entry (template node &optional width)
  "Formats NODE for display in the results list.
WIDTH is the width of the results list.
TEMPLATE is the processed template used to format the entry."
  (pcase-let ((`(,tmpl . ,tmpl-width) template))
    (org-roam-format-template
     tmpl
     (lambda (field _default-val)
       (pcase-let* ((`(,field-name ,field-width) (split-string field ":"))
                    (getter (intern (concat "org-roam-node-" field-name)))
                    (field-value (funcall getter node)))
         (when (and (equal field-name "file")
                    field-value)
           (setq field-value (format "%s"
				     (my/org-roam-get-subdirectory
				      (file-relative-name field-value org-roam-directory)))))  ;; this bit was copied from nobiot's version
         (when (and (equal field-name "olp")
                    field-value)
           (setq field-value (string-join field-value " > ")))
         (when (and field-value (not (listp field-value)))
           (setq field-value (list field-value)))
         (setq field-value (mapconcat
                            (lambda (v)
                              (concat (or (cdr (assoc field-name org-roam-node-template-prefixes))
                                          "")
                                      v))
                            field-value " "))
         (setq field-width (cond
                            ((not field-width)
                             field-width)
                            ((string-equal field-width "*")
                             (if width
                                 (- width tmpl-width)
                               tmpl-width))
                            ((>= (string-to-number field-width) 0)
                             (string-to-number field-width))))
         (when field-width
           (let* ((truncated (truncate-string-to-width field-value field-width 0 ?\s))
                  (tlen (length truncated))
                  (len (length field-value)))
             (if (< tlen len)
                 ;; Make the truncated part of the string invisible. If strings
                 ;; are pre-propertized with display or invisible properties, the
                 ;; formatting may get messed up. Ideally, truncated strings are
                 ;; not preformatted with these properties. Face properties are
                 ;; allowed without restriction.
                 (put-text-property tlen len 'invisible t field-value)
               ;; If the string wasn't truncated, but padded, use this string instead.
               (setq field-value truncated))))
         field-value)))))

#+end_src


** org-roam-server
This should get the server view working.

[2021-11-02 Tue]
- org-roam-server deprecated for org-roam v2.
- [[https://github.com/org-roam/org-roam-ui][org-roam-ui]] is the new package.

#+BEGIN_SRC emacs-lisp
;(use-package org-roam-server
;  :ensure t
;  :config
;  (setq org-roam-server-host "127.0.0.1"
;        org-roam-server-port 8080
;        org-roam-server-authenticate nil
;        org-roam-server-export-inline-images t
;        org-roam-server-serve-files nil
;        org-roam-server-served-file-extensions '("pdf" "mp4" "ogv")
;        org-roam-server-network-poll t
;        org-roam-server-network-arrows nil
;        org-roam-server-network-label-truncate t
;        org-roam-server-network-label-truncate-length 60
;        org-roam-server-network-label-wrap-length 20))
#+END_SRC
** org-roam-ui
https://github.com/org-roam/org-roam-ui


* dired-sidebar
#+BEGIN_SRC emacs-lisp
(use-package dired-sidebar
  :bind (("C-x C-n" . dired-sidebar-toggle-sidebar))
  :ensure t
  :commands (dired-sidebar-toggle-sidebar)
  :init
  (add-hook 'dired-sidebar-mode-hook
            (lambda ()
              (unless (file-remote-p default-directory)
                (auto-revert-mode))))
  :config
  (push 'toggle-window-split dired-sidebar-toggle-hidden-commands)
  (push 'rotate-windows dired-sidebar-toggle-hidden-commands)

  (setq dired-sidebar-subtree-line-prefix "__")
  (setq dired-sidebar-theme 'vscode)
  (setq dired-sidebar-use-term-integration t)
  (setq dired-sidebar-use-custom-font t)
)
#+END_SRC

* deft
#+BEGIN_SRC emacs-lisp
(use-package deft
  :ensure t
  :config
  (setq deft-directory "~/Dropbox/omnibus/")
)
#+END_SRC

* helm-org-rifle
#+BEGIN_SRC emacs-lisp
(use-package helm-org-rifle
  :ensure t
)
#+END_SRC

* helm
#+BEGIN_SRC emacs-lisp
(use-package helm
  :ensure t
  :config
  (helm-mode 1)
  (global-set-key (kbd "M-x") 'helm-M-x)
  (global-set-key (kbd "C-x C-f") 'helm-find-files)
)
#+END_SRC

* evil
#+BEGIN_SRC emacs-lisp
(use-package evil
  :ensure t
  :config
  (evil-mode 0)
)
#+END_SRC
* markdown-mode
#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :ensure t
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "multimarkdown")
  :custom
  (markdown-asymmetric-header t)
  (markdown-split-window-direction 'right)
  :config
  (unbind-key "<M-down>" markdown-mode-map)
  (unbind-key "<M-up>" markdown-mode-map)
)
#+END_SRC
* olivetti
"Distraction-free writing means that your computer screen is free of clutter and, just like an old typewriter, only shows the text you are working on. In the article about configuring Emacs, we already removed the menu bar and other on-screen distractions.

[[https://github.com/rnkn/olivetti][Olivetti]] is a simple Emacs minor mode that facilities distraction-free writing. The name Olivetti derives from the famous typewriter brand.

You activate Olivetti mode with M-x olivetti-mode. This minor mode reduces the width of the text to seventy characters and centres the text in the middle of the window. The width of the text is changeable with the M-x olivetti-set-with command or C-c \." ~[[https://lucidmanager.org/productivity/ricing-org-mode/][source]]

- [2021-11-08 Mon]
  - For some reason the =:init= feature to set initial body width doesn't seem to work, and apparently adding a =:hook= doesn't work either, but [[https://www.reddit.com/r/emacs/comments/mdjt6x/comment/gsk0oa9/?utm_source=share&utm_medium=web2x&context=3][according to this reddit thread]] invoking =add-hook= after closing =use-package= totally works.
- [2022-03-14 Mon]
  - I removed the non-functional "distraction-free" mode I'd copied from [[https://lucidmanager.org/productivity/ricing-org-mode/][here]].

#+BEGIN_SRC emacs-lisp
;; Distraction-free screen
(use-package olivetti
    :ensure t
;    :init
;    (setq olivetti-body-width 80)
)

(add-hook 'olivetti-mode-on-hook (lambda () (olivetti-set-width 80)))
#+END_SRC
** 
* Backups, Auto-Save, and Version Control
You do in fact still want to use emacs' backups alongside a VC like git, for reasons stated in [[https://stackoverflow.com/a/151946][the comments to this stackoverflow answer]]:
    "The backups are for when you are editing something not under version control - like a config file or something quick and dirty that you haven't gotten around to putting into version control yet. Then, when you haven't been doing what you ought to, the editor saves your neck."
** Auto-save and Backup
[[https://emacs.stackexchange.com/a/37210][This]] will configure things to save both backup and auto-save files to an emacs-backups directory relative to the file you are visiting:
sflsdflkjh
#+begin_src emacs-lisp
(let ((dir "emacs-backups"))
  (setq backup-directory-alist `((".*" . ,dir)))

;  (setq auto-save-file-name-transforms `((".*" "emacs-autosaves" t)))  
;; The previous line fails to move auto-saves to a different folder.
;; It also causes auto-save to fail with the following error:
;; Error (auto-save): Auto-saving gtd.org: Opening output file: Permission denied, c:/#!Users!Ethan!Dropbox!gtd!gtd.org#
;; If you're getting that error you will need to reset the var's value AND close and re-open the other buffer
;; (it seems to effect this buffer fine) 


;  (setq auto-save-file-name-transforms 
;        `(("\\`/[^/]*:\\([^/]*/\\)*\\([^/]*\\)\\'"
;           ,(concat temporary-file-directory "\\2") t)))
;; The previous line just resets the var to the default value
)



; from https://stackoverflow.com/questions/151945/how-do-i-control-how-emacs-makes-backup-files
;(defvar --backup-subdir "emacs-backups")
;(if (not (file-exists-p --backup-subdir))
;        (make-directory --backup-subdir t))
;(setq backup-directory-alist `(("." . ,--backup-subdir)))

(setq make-backup-files t               ; backup of a file the first time it is saved.
      backup-by-copying t               ; don't clobber symlinks
      version-control t                 ; version numbers for backup files
      delete-old-versions t             ; delete excess backup files silently
      delete-by-moving-to-trash t
      kept-old-versions 6               ; oldest versions to keep when a new numbered backup is made (default: 2)
      kept-new-versions 9               ; newest versions to keep when a new numbered backup is made (default: 2)
      auto-save-default t               ; auto-save every buffer that visits a file
      auto-save-timeout 20              ; number of seconds idle time before auto-save (default: 30)
      auto-save-interval 200            ; number of keystrokes between auto-saves (default: 300)
      )
#+end_src
** magit

See [[https://emacs.stackexchange.com/questions/293/what-should-shouldnt-i-do-when-keeping-emacs-and-emacs-d-in-version-control][here]] for thoughts on keeping emacs stuff in version control.
test change
#+begin_src emacs-lisp
(use-package magit
  :ensure t
  :bind (("C-x g" . magit)))

#+end_src
* xah-check-parens-balance
- [2021-11-03 Wed]
  - From [[http://ergoemacs.org/emacs/emacs_check_parens_balance.html][here]]. Solves the problems I was having with other paren checkers that would confuse <> with ().
  - The original includes a lot of interesting variant delimeter characters, but I don't know how to save them so I'm cutting them out.


#+begin_src emacs-lisp
(defun xah-check-parens-balance ()
  "Check if there are unbalanced parentheses/brackets/quotes in current bufffer or selection.
If so, place cursor there, print error to message buffer.

URL `http://ergoemacs.org/emacs/emacs_check_parens_balance.html'
Version 2018-07-03"
  (interactive)
  (let* (
         ($bracket-alist
          '( (?< . ?>) (?{ . ?}) (?\[ . ?\]) (?\( . ?\))))
         ;; regex string of all pairs to search.
         ($bregex
          (let (($tempList nil))
            (mapc
             (lambda (x)
               (push (char-to-string (car x)) $tempList)
               (push (char-to-string (cdr x)) $tempList))
             $bracket-alist)
            (regexp-opt $tempList )))
         $p1
         $p2
         ;; each entry is a vector [char position]
         ($stack '())
         ($char nil)
         $pos
         $is-closing-char-p
         $matched-open-char
         )
    (if (region-active-p)
        (setq $p1 (region-beginning) $p2 (region-end))
      (setq $p1 (point-min) $p2 (point-max)))

    (save-excursion
      (save-restriction
        (narrow-to-region $p1 $p2)
        (progn
          (goto-char (point-min))
          (while (re-search-forward $bregex nil "move")
            (setq $pos (point))
            (setq $char (char-before))
            (progn
              (setq $is-closing-char-p (rassoc $char $bracket-alist))
              (if $is-closing-char-p
                  (progn
                    (setq $matched-open-char
                          (if $is-closing-char-p
                              (car $is-closing-char-p)
                            (error "logic error 64823. The char %s has no matching pair."
                                   (char-to-string $char))))
                    (if $stack
                        (if (eq (aref (car $stack) 0) $matched-open-char )
                            (pop $stack)
                          (push (vector $char $pos) $stack ))
                      (progn
                        (goto-char $pos)
                        (error "First mismtach found. the char %s has no matching pair."
                               (char-to-string $char)))))
                (push (vector $char $pos) $stack ))))
          (if $stack
              (progn
                (goto-char (aref (car $stack) 1))
                (message "Mismtach found. The char %s has no matching pair." $stack))
            (print "All brackets/quotes match.")))))))
#+end_src
* FINAL Open ~/.emacs.d/emacs-config.org on startup
#+BEGIN_SRC emacs-lisp
(find-file "~/.emacs.d/emacs-config.org")
#+END_SRC
 
